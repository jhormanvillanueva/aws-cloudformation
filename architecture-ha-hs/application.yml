AWSTemplateFormatVersion: '2010-09-09'

Description:
  services about application layer

Resources:

  #Configure securities groups
  SGbastionHost:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection from ssh
      VpcId:
        Fn::ImportValue:
          !Sub "network-stack-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
    
  SGALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection from http port 80
      VpcId:
        Fn::ImportValue:
          !Sub "network-stack-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  SGwebserver:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection from alb
      VpcId:
        Fn::ImportValue:
          !Sub "network-stack-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt SGALB.GroupId
  
  SGdatabases:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection from web server
      VpcId:
        Fn::ImportValue:
          !Sub "network-stack-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt SGwebserver.GroupId
  
  #Configure bastion host
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:      
      ImageId: ami-0fff1b9a61dec8a5f
      AvailabilityZone: us-east-1a
      InstanceType: t2.micro
      IamInstanceProfile: EC2s3
      KeyName: iotTest
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SGbastionHost
          SubnetId:
            Fn::ImportValue:
              !Sub "network-stack-PublicSubnetA"
      Tags:
        - Key: Name
          Value: webServer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo dnf install -y python3.9-pip
          sudo dnf install -y git
          sudo dnf install -y mariadb105-server          
          sudo pip install flask
          sudo pip install flask-mysql
          sudo pip install pymysql
          sudo pip install mysql-connector-python
          sudo pip install boto3
          sudo service mariadb start 
          sudo chkconfig mariadb on
          sudo git clone https://github.com/jhormanvillanueva/ec2-rds-ssm-python.git
          sudo mv ec2-rds-ssm-python /home/ec2-user
        
  #Configure Launch Template

  LaunchTemplateBookStore:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: launchTemplateBookStore
      LaunchTemplateData:
        ImageId: ami-0fff1b9a61dec8a5f
        InstanceType: t2.micro
        IamInstanceProfile:
          Name: EC2s3
        KeyName: iotTest
        SecurityGroupIds:
          - !Ref SGwebserver
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update
            sudo dnf install -y python3.9-pip
            sudo dnf install -y git
            sudo dnf install -y mariadb105-server          
            sudo pip install flask
            sudo pip install flask-mysql
            sudo pip install pymysql
            sudo pip install mysql-connector-python
            sudo pip install boto3
            sudo service mariadb start 
            sudo chkconfig mariadb on
            wget https://jav-bookstore-files.s3.amazonaws.com/bookapp.service
            wget https://jav-bookstore-files.s3.amazonaws.com/bookDB.sql
            sudo mv bookapp.service /etc/systemd/system            
            sudo git clone https://github.com/jhormanvillanueva/ec2-rds-ssm-python.git
            sudo mv ec2-rds-ssm-python /home/ec2-user
            sudo systemctl start bookapp.service
            sudo systemctl enable bookapp.service
  
  #Configure Application Load Balancer
  ALBook:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALBook
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SGALB
      Subnets:
        - Fn::ImportValue:
            !Sub "network-stack-PublicSubnetA"
        - Fn::ImportValue:
            !Sub "network-stack-PublicSubnetB"
      Type: application

  #Configure a target group
  TGalb:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      Name: TGalb
      Port: 5000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Sub "network-stack-VPCID"
      TargetType: instance
  
#Configure a listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TGalb
          Type: forward
      LoadBalancerArn: !Ref ALBook
      Port: 80
      Protocol: HTTP
  
  #Configure Auto Scaling Group
  ASGBook:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ASGbookstore        
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      LaunchTemplate:
        LaunchTemplateId:
          Ref: LaunchTemplateBookStore
        Version: !GetAtt LaunchTemplateBookStore.LatestVersionNumber
      TargetGroupARNs:
        - !Ref TGalb
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "network-stack-PrivateSubnetA"
        - Fn::ImportValue: !Sub "network-stack-PrivateSubnetB"
  
  #Configure scaling policy
  ScalingPolicyASG:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:      
      AutoScalingGroupName: !Ref ASGBook
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60

Outputs:
  ALBDNS:
    Description: DNS ALB
    Value: !GetAtt ALBook.DNSName
    Export:
      Name: ALBDNS
  
  BastionHost:
    Description: ip public bastion
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: BastionHost
  
  SGdatabases:
    Description: SG databases
    Value: !GetAtt SGdatabases.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-SGdatabases
  
 
        